// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination ./service_mock_test.go -package snippets_test -mock_names Storage=MockStorage
//

// Package snippets_test is a generated GoMock package.
package snippets_test

import (
	context "context"
	reflect "reflect"

	snippets "github.com/titusjaka/go-sample/v2/internal/business/snippets"
	service "github.com/titusjaka/go-sample/v2/internal/infrastructure/service"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(ctx context.Context, snippet snippets.Snippet) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, snippet)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, snippet any) *MockStorageCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, snippet)
	return &MockStorageCreateCall{Call: call}
}

// MockStorageCreateCall wrap *gomock.Call
type MockStorageCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageCreateCall) Return(arg0 uint, arg1 error) *MockStorageCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageCreateCall) Do(f func(context.Context, snippets.Snippet) (uint, error)) *MockStorageCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageCreateCall) DoAndReturn(f func(context.Context, snippets.Snippet) (uint, error)) *MockStorageCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, id uint) (snippets.Snippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(snippets.Snippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, id any) *MockStorageGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, id)
	return &MockStorageGetCall{Call: call}
}

// MockStorageGetCall wrap *gomock.Call
type MockStorageGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageGetCall) Return(arg0 snippets.Snippet, arg1 error) *MockStorageGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageGetCall) Do(f func(context.Context, uint) (snippets.Snippet, error)) *MockStorageGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageGetCall) DoAndReturn(f func(context.Context, uint) (snippets.Snippet, error)) *MockStorageGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockStorage) List(ctx context.Context, pagination service.Pagination) ([]snippets.Snippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, pagination)
	ret0, _ := ret[0].([]snippets.Snippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageMockRecorder) List(ctx, pagination any) *MockStorageListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), ctx, pagination)
	return &MockStorageListCall{Call: call}
}

// MockStorageListCall wrap *gomock.Call
type MockStorageListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageListCall) Return(arg0 []snippets.Snippet, arg1 error) *MockStorageListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageListCall) Do(f func(context.Context, service.Pagination) ([]snippets.Snippet, error)) *MockStorageListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageListCall) DoAndReturn(f func(context.Context, service.Pagination) ([]snippets.Snippet, error)) *MockStorageListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SoftDelete mocks base method.
func (m *MockStorage) SoftDelete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockStorageMockRecorder) SoftDelete(ctx, id any) *MockStorageSoftDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockStorage)(nil).SoftDelete), ctx, id)
	return &MockStorageSoftDeleteCall{Call: call}
}

// MockStorageSoftDeleteCall wrap *gomock.Call
type MockStorageSoftDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageSoftDeleteCall) Return(arg0 error) *MockStorageSoftDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageSoftDeleteCall) Do(f func(context.Context, uint) error) *MockStorageSoftDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageSoftDeleteCall) DoAndReturn(f func(context.Context, uint) error) *MockStorageSoftDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Total mocks base method.
func (m *MockStorage) Total(ctx context.Context) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total", ctx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total.
func (mr *MockStorageMockRecorder) Total(ctx any) *MockStorageTotalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockStorage)(nil).Total), ctx)
	return &MockStorageTotalCall{Call: call}
}

// MockStorageTotalCall wrap *gomock.Call
type MockStorageTotalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageTotalCall) Return(arg0 uint, arg1 error) *MockStorageTotalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageTotalCall) Do(f func(context.Context) (uint, error)) *MockStorageTotalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageTotalCall) DoAndReturn(f func(context.Context) (uint, error)) *MockStorageTotalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
