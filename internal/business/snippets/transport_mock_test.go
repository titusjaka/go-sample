// Code generated by MockGen. DO NOT EDIT.
// Source: transport.go
//
// Generated by this command:
//
//	mockgen -typed -source=transport.go -destination ./transport_mock_test.go -package snippets_test -mock_names Service=MockService
//

// Package snippets_test is a generated GoMock package.
package snippets_test

import (
	context "context"
	reflect "reflect"

	snippets "github.com/titusjaka/go-sample/internal/business/snippets"
	service "github.com/titusjaka/go-sample/internal/infrastructure/service"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, snippet snippets.Snippet) (snippets.Snippet, *service.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, snippet)
	ret0, _ := ret[0].(snippets.Snippet)
	ret1, _ := ret[1].(*service.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, snippet any) *MockServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, snippet)
	return &MockServiceCreateCall{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall) Return(arg0 snippets.Snippet, arg1 *service.Error) *MockServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall) Do(f func(context.Context, snippets.Snippet) (snippets.Snippet, *service.Error)) *MockServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall) DoAndReturn(f func(context.Context, snippets.Snippet) (snippets.Snippet, *service.Error)) *MockServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, id uint) (snippets.Snippet, *service.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(snippets.Snippet)
	ret1, _ := ret[1].(*service.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, id any) *MockServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, id)
	return &MockServiceGetCall{Call: call}
}

// MockServiceGetCall wrap *gomock.Call
type MockServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetCall) Return(arg0 snippets.Snippet, arg1 *service.Error) *MockServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetCall) Do(f func(context.Context, uint) (snippets.Snippet, *service.Error)) *MockServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetCall) DoAndReturn(f func(context.Context, uint) (snippets.Snippet, *service.Error)) *MockServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockService) List(ctx context.Context, limit, offset uint) ([]snippets.Snippet, service.Pagination, *service.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]snippets.Snippet)
	ret1, _ := ret[1].(service.Pagination)
	ret2, _ := ret[2].(*service.Error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx, limit, offset any) *MockServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx, limit, offset)
	return &MockServiceListCall{Call: call}
}

// MockServiceListCall wrap *gomock.Call
type MockServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListCall) Return(arg0 []snippets.Snippet, arg1 service.Pagination, arg2 *service.Error) *MockServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListCall) Do(f func(context.Context, uint, uint) ([]snippets.Snippet, service.Pagination, *service.Error)) *MockServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListCall) DoAndReturn(f func(context.Context, uint, uint) ([]snippets.Snippet, service.Pagination, *service.Error)) *MockServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SoftDelete mocks base method.
func (m *MockService) SoftDelete(ctx context.Context, id uint) *service.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(*service.Error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockServiceMockRecorder) SoftDelete(ctx, id any) *MockServiceSoftDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockService)(nil).SoftDelete), ctx, id)
	return &MockServiceSoftDeleteCall{Call: call}
}

// MockServiceSoftDeleteCall wrap *gomock.Call
type MockServiceSoftDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSoftDeleteCall) Return(arg0 *service.Error) *MockServiceSoftDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSoftDeleteCall) Do(f func(context.Context, uint) *service.Error) *MockServiceSoftDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSoftDeleteCall) DoAndReturn(f func(context.Context, uint) *service.Error) *MockServiceSoftDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
